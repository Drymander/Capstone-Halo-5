{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Halo 5 Match Prediction Model\n",
    "\n",
    "Having spent many hours playing the specific Super Fiesta Party playlist, it seemed clear to me that we were being pit against players with a wide range of skill.  Sometimes, we would be beaten so badly that we couldn't help but laugh, despite having played just fine for the past few games.  \n",
    "\n",
    "I wanted to know for certain whether or not games were, in a sense, predetermined in any given direction.  Of course this would never be the intention of a multiplayer matchmaking system.  In theory, a perfect match making system would always be a 50/50 matchup.  Using what we learned in the first section about data from the API, let's see how close to 50/50 matchmaking really is.\n",
    "\n",
    "Test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Imports\n",
    "\n",
    "We'll start by importing the same packages as our EDA notebook a long with an extensive set of sci-kit learn tools."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:21:28.217820Z",
     "start_time": "2021-07-29T22:21:26.067390Z"
    }
   },
   "outputs": [],
   "source": [
    "#Standard Packages\n",
    "import pandas as pd\n",
    "pd.set_option('display.max_columns', None)\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import pickle\n",
    "import warnings\n",
    "warnings.filterwarnings(action='ignore') \n",
    "\n",
    "# Packages used for API calls and data processing\n",
    "import requests\n",
    "import json\n",
    "def get_keys(path):\n",
    "    with open(path) as f:\n",
    "        return json.load(f)\n",
    "import ast\n",
    "import time\n",
    "import http.client, urllib.request, urllib.parse, urllib.error, base64\n",
    "api_key = 'ceeaacb7cf024c7485e00ef8457e42dc'\n",
    "gamertag = 'Drymander'\n",
    "from tqdm import tqdm\n",
    "# !pip install isodate\n",
    "import isodate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:21:29.118909Z",
     "start_time": "2021-07-29T22:21:28.220596Z"
    }
   },
   "outputs": [],
   "source": [
    "# Preprocessing tools\n",
    "from sklearn.model_selection import train_test_split,cross_val_predict,cross_validate\n",
    "from sklearn.preprocessing import MinMaxScaler,StandardScaler,OneHotEncoder\n",
    "scaler = StandardScaler()\n",
    "from sklearn import metrics\n",
    "\n",
    "# Models & Utilities\n",
    "from sklearn.dummy import DummyClassifier\n",
    "from sklearn.linear_model import LogisticRegression,LogisticRegressionCV\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_score, recall_score, f1_score\n",
    "from sklearn import svm\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.preprocessing import minmax_scale\n",
    "from sklearn.preprocessing import MaxAbsScaler\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import RobustScaler\n",
    "from sklearn.preprocessing import Normalizer\n",
    "from sklearn.preprocessing import QuantileTransformer\n",
    "from sklearn.preprocessing import PowerTransformer\n",
    "from sklearn.preprocessing import OneHotEncoder\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Intro\n",
    "\n",
    "When I first started this project, I tried running models using matches from my personal history.  However, there was one major issue wwith that choice.  In order to get the features for our model, we will need to pull information that is only available from the API in a 'total lifetime' format.  \n",
    "\n",
    "This means that if I played with a player **10 months ago**, I would actually only be able to pull features for that player for their stats **today**.  In other words, only the past ~3 weeks or so of matches could be considered passable as quality data where every player's time line synced with when the match was played.\n",
    "\n",
    "Not satisfied with a model with poor quality and very scattered cross variance scores, I decided to go about it in a different way.\n",
    "\n",
    "From my earlier data collection, I was able to amass a list of unique gamertag names that I have played with throughout time.  We will build a process to pull each of those players' 25 most recent games, put each game into one line of the dataframe, and limit the date range of those matches so that all data will be properly synced."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:23:46.299718Z",
     "start_time": "2021-07-29T22:23:46.282725Z"
    }
   },
   "source": [
    "# Data & APIs\n",
    "\n",
    "Similar to the EDA notebook, we'll be using multiple APIs to collect our data.  Here's an overview of each API.\n",
    "\n",
    "### Player Match History API\n",
    "\n",
    "First, we'll use this API to get a list of all Match ID's and all dates of matches that I have played.\n",
    "\n",
    "### Match Result: Arena API\n",
    "\n",
    "Using the Match ID's, we will call the Match Result - Arena API for all matches returned in the Player Match History API.  From this, we'll be using player names, Spartan Rank, Previous Total XP, and information about who won, lost, or tied the match.\n",
    "\n",
    "### Player Service Records: Arena API\n",
    "\n",
    "Once we have the player's gamertags, we'll be formatting them into a string and calling the Player Service Records: Arena API.  This API will return a list of dictionaries offering aggregate lifetime stats for each player broken down by game type.\n",
    "\n",
    "### Metadata - Game Base Variant API, Playlists API, Map Variants API\n",
    "\n",
    "For efficiency, we'll skip accessing these APIs for this notebook, since we already have the static information they provide stored in pickle files."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gamertag for API\n",
    "\n",
    "This is a simple function to prepare anyone's gamertag from how it would normally appear to how it needs to be formatted for the API."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:12:44.456799Z",
     "start_time": "2021-07-26T16:12:44.451798Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'this+is+a+test'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Prepare gamertag for API\n",
    "def gamertag_for_api(gamertag):\n",
    "    \n",
    "    # Replace spaces with '+'\n",
    "    gamertag = gamertag.replace(' ','+')\n",
    "    return gamertag\n",
    "\n",
    "# Testing the function\n",
    "gamertag_for_api('this is a test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pull Recent Match\n",
    "\n",
    "This pulls the most recent match information for any given player.\n",
    "\n",
    "It uses two API calls.  The first will give us the match ID and date of the most recent game any player has played by specifying their gamertag.  The second calls the match results API, which gives us the gamertags of all players in the match as well as information on winner / loser / tie etc.  It will also give us Spartan Rank and Total XP."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:12:46.007570Z",
     "start_time": "2021-07-26T16:12:44.458799Z"
    }
   },
   "outputs": [],
   "source": [
    "# Function to pull most recent match stats into JSON format\n",
    "# Uses two separate API calls, one from player history and another from match details\n",
    "def pull_recent_match(how_recent, api_key=api_key, explore=False, gamertag='Drymander'):\n",
    "    \n",
    "    # Use gamertag_for_api function to remove any spaces\n",
    "    gamertag = gamertag_for_api(gamertag)\n",
    "    headers = {\n",
    "        # Request headers\n",
    "        'Ocp-Apim-Subscription-Key': api_key,\n",
    "    }\n",
    "    # Pulls from arena mode, how_recent is how far to go back in the match history\n",
    "    # 'count' refers to the number of matches to pull\n",
    "    params = urllib.parse.urlencode({\n",
    "        # Request parameters\n",
    "        'modes': 'arena',\n",
    "        'start': how_recent,\n",
    "        'count': 1,\n",
    "        'include-times': True,\n",
    "    })\n",
    "    \n",
    "    # Try this, otherwise return error message\n",
    "    try:\n",
    "        \n",
    "        # Connect to API and pull most recent match for specified gamer\n",
    "        conn = http.client.HTTPSConnection('www.haloapi.com')\n",
    "        conn.request(\"GET\", f\"/stats/h5/players/{gamertag}/matches?%s\" % params, \"{body}\", headers)\n",
    "        response = conn.getresponse()\n",
    "        latest_match = json.loads(response.read())\n",
    "        \n",
    "        # Identify match ID and match date\n",
    "        match_id = latest_match['Results'][0]['Id']['MatchId']\n",
    "        match_date = latest_match['Results'][0]['MatchCompletedDate']['ISO8601Date']\n",
    "        \n",
    "        # Rest for 1.01 seconds to not get blocked by API\n",
    "        time.sleep(1.01)\n",
    "        \n",
    "        # Using match_id, pull details from match\n",
    "        conn.request(\"GET\", f\"/stats/h5/arena/matches/{match_id}?%s\" % params, \"{body}\", headers)\n",
    "        response = conn.getresponse()\n",
    "        data = response.read()\n",
    "        \n",
    "        # Option to return as byte string for alternative viewing\n",
    "        if explore == True:\n",
    "            print(data)\n",
    "        else:\n",
    "            # Append match ID and date from player history API call\n",
    "            match_results = json.loads(data)\n",
    "            match_results['MatchId'] = match_id\n",
    "            match_results['Date'] = match_date\n",
    "        conn.close()\n",
    "    \n",
    "    # Print error if issue with calling API\n",
    "    except Exception as e:\n",
    "        print(f\"[Errno {0}] {1}\".format(e.errno, e.strerror))\n",
    "    \n",
    "    # Return match results as JSON\n",
    "    return match_results\n",
    "\n",
    "# Show result\n",
    "match_results = pull_recent_match(0, explore=False, gamertag='Drymander')\n",
    "# match_results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build Base Dataframe\n",
    "\n",
    "Now that we have our match results JSON for the most recent match, we'll build a base dataframe similar to what we built in the EDA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:12:47.419706Z",
     "start_time": "2021-07-26T16:12:46.008570Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>MatchId</th>\n",
       "      <th>GameBaseVariantId</th>\n",
       "      <th>PlaylistId</th>\n",
       "      <th>MapVariantId</th>\n",
       "      <th>DNF</th>\n",
       "      <th>TeamId</th>\n",
       "      <th>PlayerTeam</th>\n",
       "      <th>Winner</th>\n",
       "      <th>TeamColor</th>\n",
       "      <th>Gamertag</th>\n",
       "      <th>SpartanRank</th>\n",
       "      <th>PrevTotalXP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-07-29 01:41:02.570</td>\n",
       "      <td>31bfdcf5-3dd4-441d-b260-9a8637d721e6</td>\n",
       "      <td>a2949322-dc84-45ab-8454-cf94fb28c189</td>\n",
       "      <td>f0c9ef9a-48bd-4b24-9db3-2c76b4e23450</td>\n",
       "      <td>e2c25cc8-8f51-44ba-bcde-ff08993b01c8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Enemy</td>\n",
       "      <td>Victory</td>\n",
       "      <td>Blue</td>\n",
       "      <td>Doomnwo</td>\n",
       "      <td>149</td>\n",
       "      <td>23749271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2021-07-29 01:41:02.570</td>\n",
       "      <td>31bfdcf5-3dd4-441d-b260-9a8637d721e6</td>\n",
       "      <td>a2949322-dc84-45ab-8454-cf94fb28c189</td>\n",
       "      <td>f0c9ef9a-48bd-4b24-9db3-2c76b4e23450</td>\n",
       "      <td>e2c25cc8-8f51-44ba-bcde-ff08993b01c8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Enemy</td>\n",
       "      <td>Victory</td>\n",
       "      <td>Blue</td>\n",
       "      <td>JoelODST117</td>\n",
       "      <td>149</td>\n",
       "      <td>23720290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2021-07-29 01:41:02.570</td>\n",
       "      <td>31bfdcf5-3dd4-441d-b260-9a8637d721e6</td>\n",
       "      <td>a2949322-dc84-45ab-8454-cf94fb28c189</td>\n",
       "      <td>f0c9ef9a-48bd-4b24-9db3-2c76b4e23450</td>\n",
       "      <td>e2c25cc8-8f51-44ba-bcde-ff08993b01c8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Enemy</td>\n",
       "      <td>Victory</td>\n",
       "      <td>Blue</td>\n",
       "      <td>Mx J3NY Mx</td>\n",
       "      <td>146</td>\n",
       "      <td>9194326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2021-07-29 01:41:02.570</td>\n",
       "      <td>31bfdcf5-3dd4-441d-b260-9a8637d721e6</td>\n",
       "      <td>a2949322-dc84-45ab-8454-cf94fb28c189</td>\n",
       "      <td>f0c9ef9a-48bd-4b24-9db3-2c76b4e23450</td>\n",
       "      <td>e2c25cc8-8f51-44ba-bcde-ff08993b01c8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Enemy</td>\n",
       "      <td>Victory</td>\n",
       "      <td>Blue</td>\n",
       "      <td>KarryDahZX</td>\n",
       "      <td>149</td>\n",
       "      <td>18940553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-07-29 01:41:02.570</td>\n",
       "      <td>31bfdcf5-3dd4-441d-b260-9a8637d721e6</td>\n",
       "      <td>a2949322-dc84-45ab-8454-cf94fb28c189</td>\n",
       "      <td>f0c9ef9a-48bd-4b24-9db3-2c76b4e23450</td>\n",
       "      <td>e2c25cc8-8f51-44ba-bcde-ff08993b01c8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Player</td>\n",
       "      <td>Defeat</td>\n",
       "      <td>Red</td>\n",
       "      <td>Drymander</td>\n",
       "      <td>148</td>\n",
       "      <td>15735444</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Date                               MatchId  \\\n",
       "1 2021-07-29 01:41:02.570  31bfdcf5-3dd4-441d-b260-9a8637d721e6   \n",
       "5 2021-07-29 01:41:02.570  31bfdcf5-3dd4-441d-b260-9a8637d721e6   \n",
       "6 2021-07-29 01:41:02.570  31bfdcf5-3dd4-441d-b260-9a8637d721e6   \n",
       "7 2021-07-29 01:41:02.570  31bfdcf5-3dd4-441d-b260-9a8637d721e6   \n",
       "0 2021-07-29 01:41:02.570  31bfdcf5-3dd4-441d-b260-9a8637d721e6   \n",
       "\n",
       "                      GameBaseVariantId                            PlaylistId  \\\n",
       "1  a2949322-dc84-45ab-8454-cf94fb28c189  f0c9ef9a-48bd-4b24-9db3-2c76b4e23450   \n",
       "5  a2949322-dc84-45ab-8454-cf94fb28c189  f0c9ef9a-48bd-4b24-9db3-2c76b4e23450   \n",
       "6  a2949322-dc84-45ab-8454-cf94fb28c189  f0c9ef9a-48bd-4b24-9db3-2c76b4e23450   \n",
       "7  a2949322-dc84-45ab-8454-cf94fb28c189  f0c9ef9a-48bd-4b24-9db3-2c76b4e23450   \n",
       "0  a2949322-dc84-45ab-8454-cf94fb28c189  f0c9ef9a-48bd-4b24-9db3-2c76b4e23450   \n",
       "\n",
       "                           MapVariantId  DNF  TeamId PlayerTeam   Winner  \\\n",
       "1  e2c25cc8-8f51-44ba-bcde-ff08993b01c8  0.0     1.0      Enemy  Victory   \n",
       "5  e2c25cc8-8f51-44ba-bcde-ff08993b01c8  0.0     1.0      Enemy  Victory   \n",
       "6  e2c25cc8-8f51-44ba-bcde-ff08993b01c8  0.0     1.0      Enemy  Victory   \n",
       "7  e2c25cc8-8f51-44ba-bcde-ff08993b01c8  0.0     1.0      Enemy  Victory   \n",
       "0  e2c25cc8-8f51-44ba-bcde-ff08993b01c8  0.0     0.0     Player   Defeat   \n",
       "\n",
       "  TeamColor     Gamertag SpartanRank PrevTotalXP  \n",
       "1      Blue      Doomnwo         149    23749271  \n",
       "5      Blue  JoelODST117         149    23720290  \n",
       "6      Blue   Mx J3NY Mx         146     9194326  \n",
       "7      Blue   KarryDahZX         149    18940553  \n",
       "0       Red    Drymander         148    15735444  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Function to build the base dataframe for a single match\n",
    "# Designed to take in the JSON provided by the pull_recent_match function\n",
    "def build_base_dataframe(match_results, gamertag):\n",
    "    \n",
    "    # Build empty base match dataframe\n",
    "    df = pd.DataFrame()\n",
    "    columns = [\n",
    "        'Finished'\n",
    "        'TeamId',\n",
    "        'Gamertag',\n",
    "        'SpartanRank',\n",
    "        'PrevTotalXP',\n",
    "    ]\n",
    "    df = pd.DataFrame(columns = columns)\n",
    "    \n",
    "    # Populate base match dataframe with player stats for each player\n",
    "    i = 0\n",
    "    for player in match_results['PlayerStats']:\n",
    "\n",
    "        player_dic = {}\n",
    "        # Team ID\n",
    "        player_dic['DNF'] = match_results['PlayerStats'][i]['DNF']\n",
    "        player_dic['TeamId'] = match_results['PlayerStats'][i]['TeamId']\n",
    "        # Team Color\n",
    "        player_dic['TeamColor'] = match_results['PlayerStats'][i]['TeamId']\n",
    "        # Gamer Tag\n",
    "        player_dic['Gamertag'] = match_results['PlayerStats'][i]['Player']['Gamertag']\n",
    "        # Spartan Rank\n",
    "        player_dic['SpartanRank'] = match_results['PlayerStats'][i]['XpInfo']['SpartanRank']\n",
    "        # Previous Total XP\n",
    "        player_dic['PrevTotalXP'] = match_results['PlayerStats'][i]['XpInfo']['PrevTotalXP']\n",
    "        df = df.append(player_dic, ignore_index=True)\n",
    "        i += 1\n",
    "    \n",
    "    ########## DATE, GAME VARIANT, MAP ID, MATCH ID, PLAYLIST ID ##########\n",
    "    df['Date'] = match_results['Date']\n",
    "    df['Date'] = pd.to_datetime(df['Date']).dt.tz_convert(None)\n",
    "#     df['Date'] = df['Date'].floor('T')\n",
    "    df['MatchId'] = match_results['MatchId']\n",
    "    df['GameBaseVariantId'] = match_results['GameBaseVariantId']\n",
    "    df['MapVariantId'] = match_results['MapVariantId']\n",
    "    df['PlaylistId'] = match_results['PlaylistId']\n",
    "    \n",
    "    ########## DEFINE PLAYER TEAM ##########\n",
    "    playerteam = df.loc[df['Gamertag'] == gamertag, 'TeamId'].values[0]\n",
    "    if playerteam == 0:\n",
    "        enemyteam = 1   \n",
    "    else:\n",
    "        enemyteam = 0\n",
    "        \n",
    "    df['PlayerTeam'] = df['TeamId'].map({playerteam:'Player', enemyteam:'Enemy'})\n",
    "    \n",
    "    if match_results['TeamStats'][0]['TeamId'] == playerteam:\n",
    "        playerteam_stats = match_results['TeamStats'][0]\n",
    "        enemyteam_stats = match_results['TeamStats'][1]\n",
    "    else: \n",
    "        playerteam_stats = match_results['TeamStats'][1]\n",
    "        enemyteam_stats = match_results['TeamStats'][0]\n",
    "    \n",
    "    ########## DETERMINE WINNER ##########\n",
    "    # Tie\n",
    "    if playerteam_stats['Rank'] == 1 and enemyteam_stats['Rank'] == 1:\n",
    "        df['Winner'] = 'Tie'\n",
    "    # Player wins\n",
    "    elif playerteam_stats['Rank'] == 1 and enemyteam_stats['Rank'] == 2:\n",
    "        df['Winner'] = df['TeamId'].map({playerteam:'Victory', enemyteam:'Defeat'})\n",
    "    # Enemy wins\n",
    "    elif playerteam_stats['Rank'] == 2 and enemyteam_stats['Rank'] == 1:\n",
    "        df['Winner'] = df['TeamId'].map({enemyteam:'Victory', playerteam:'Defeat'})\n",
    "    # Error handling\n",
    "    else:\n",
    "        winner = 'Error determining winner'\n",
    "    \n",
    "    ########## TEAM COLOR ##########\n",
    "    df['TeamColor'] = df['TeamId'].map({0:'Red', 1:'Blue'})\n",
    "    \n",
    "    # Set columns\n",
    "    df = df[['Date', 'MatchId', 'GameBaseVariantId', 'PlaylistId', 'MapVariantId', 'DNF',\n",
    "             'TeamId', 'PlayerTeam', 'Winner', 'TeamColor', \n",
    "             'Gamertag', 'SpartanRank', 'PrevTotalXP',\n",
    "            ]]\n",
    "    # Sort match by winning team\n",
    "    df = df.sort_values(by=['Winner'], ascending=False)\n",
    "    \n",
    "    return df\n",
    "\n",
    "df = build_base_dataframe(pull_recent_match(8), 'Drymander')\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get Player List\n",
    "\n",
    "Now that we have our base dataframe, we'll want to use the gamertags in the match to get more extensive player information.  First, we'll need to prepare their gamertags for the API, similar to how we did it for our first function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:12:47.427709Z",
     "start_time": "2021-07-26T16:12:47.420706Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Doomnwo,JoelODST117,Mx+J3NY+Mx,KarryDahZX,Drymander,ToweringAsh97,Andy2542,JohnyUL'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Function to combine all gamertags from the match and prepare them in string\n",
    "# format for the next API call\n",
    "def get_player_list(df):\n",
    "    \n",
    "    # Create list from our df['Gamertag'] column and remove the brackets\n",
    "    player_list = str(list(df['Gamertag']))[1:-1]\n",
    "    \n",
    "    # Format string for API\n",
    "    player_list = player_list.replace(', ',',')\n",
    "    player_list = player_list.replace(\"'\",'')\n",
    "    player_list = player_list.replace(' ','+')\n",
    "    \n",
    "    # Return in one full string\n",
    "    return player_list\n",
    "\n",
    "get_player_list(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get Player History\n",
    "\n",
    "With the gamertags prepared in one string, we'll call the Player Service Records - Arena API, which will return a single JSON file for each player detailing their aggregate stats for every variety of Arena game type (Slayer, Capture the Flag, Oddball, Strongholds, etc).  This will have informatino like total wins, total losses, total kills / assists / deaths all specific to each game type.\n",
    "\n",
    "While we'll never know for certain, the theory behind compiling the model dataframe by game type is that the features would be more representative of skill and experience in that game type.\n",
    "\n",
    "To further elaborate, we'll be using games exclusively played in Super Fiesta Party playlist, which respawns players with randomized weapons after every death.  Even if a player is very skilled at Halo, if they have never played this variety of gametype before, they will not likely fare as well as they do in more traditional Halo game types (at least for their first few games).  Thus, total stats for a player's extended Halo history would not be representative of their skill in the Super Fiesta Party playlist.\n",
    "\n",
    "We'll compile each player's service info in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:12:48.132210Z",
     "start_time": "2021-07-26T16:12:47.429708Z"
    }
   },
   "outputs": [],
   "source": [
    "# Function to pull more informative information about each player in the match\n",
    "# This information is not available in the two previous API calls\n",
    "def get_player_history(df, readable=False):\n",
    "    headers = {\n",
    "        # Request headers\n",
    "        'Ocp-Apim-Subscription-Key': str(api_key),\n",
    "    }\n",
    "    params = urllib.parse.urlencode({\n",
    "    })\n",
    "    # Use our function in the block above the prepare the gamertags for the API\n",
    "    player_list_api = get_player_list(df)\n",
    "    \n",
    "    # Try calling service records API using our player list\n",
    "    try:\n",
    "        conn = http.client.HTTPSConnection('www.haloapi.com')\n",
    "        conn.request(\"GET\", f\"/stats/h5/servicerecords/arena?players={player_list_api}&%s\" % params, \"{body}\", headers)\n",
    "        response = conn.getresponse()\n",
    "        data = response.read()\n",
    "        player_history = json.loads(data)\n",
    "        conn.close()\n",
    "    \n",
    "    # Return error if issue with API\n",
    "    except Exception as e:\n",
    "        print(f\"[Errno {0}] {1}\".format(e.errno, e.strerror))\n",
    "    \n",
    "    # Option to view in byte string readable format\n",
    "    if readable == False:\n",
    "        return player_history\n",
    "    else:\n",
    "        return data\n",
    "\n",
    "# Show result\n",
    "player_history = get_player_history(df)\n",
    "# player_history"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build History Dataframe\n",
    "\n",
    "Now that we have our player service records for the single match, we'll extend our base dataframe by building out a new, more detailed 'variant' dataframe and append it to the base dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:12:48.259239Z",
     "start_time": "2021-07-26T16:12:48.134212Z"
    }
   },
   "outputs": [],
   "source": [
    "# Function to build secondary dataframe with more informative player stats\n",
    "def build_history_dataframe(player_history, variant_id, streamlit=False):\n",
    "    \n",
    "    # Option to view 'streamlit' dataframe, which includes pertinent\n",
    "    # information but excludes all stats for modeling\n",
    "    if streamlit == True:\n",
    "        vdf_columns = ['Gamertag','TotalTimePlayed','K/D','Accuracy','WinRate']\n",
    "        vdf = pd.DataFrame(columns = vdf_columns)\n",
    "    else:\n",
    "        stat_list = ['Gamertag', 'TotalKills', 'TotalHeadshots', 'TotalWeaponDamage', 'TotalShotsFired',\n",
    "                    'TotalShotsLanded', 'TotalMeleeKills', 'TotalMeleeDamage', 'TotalAssassinations',\n",
    "                    'TotalGroundPoundKills', 'TotalGroundPoundDamage', 'TotalShoulderBashKills',\n",
    "                    'TotalShoulderBashDamage', 'TotalGrenadeDamage', 'TotalPowerWeaponKills',\n",
    "                    'TotalPowerWeaponDamage', 'TotalPowerWeaponGrabs', 'TotalPowerWeaponPossessionTime',\n",
    "                    'TotalDeaths', 'TotalAssists', 'TotalGamesCompleted', 'TotalGamesWon',\n",
    "                    'TotalGamesLost', 'TotalGamesTied', 'TotalTimePlayed','TotalGrenadeKills']\n",
    "        vdf = pd.DataFrame(columns = stat_list)\n",
    "    \n",
    "    # Set coutner variable\n",
    "    i = 0\n",
    "    # Loop the goes through each player in the player history JSON\n",
    "    for player in player_history['Results']:\n",
    "        \n",
    "        # Loop that goes through each Arena Game Base Variant and locates\n",
    "        # the details specific to the game vase variant of the match\n",
    "        for variant in player['Result']['ArenaStats']['ArenaGameBaseVariantStats']:\n",
    "            if variant['GameBaseVariantId'] == variant_id:\n",
    "                variant_stats = variant\n",
    "        \n",
    "        # Create empty dictionary where stats will be added\n",
    "        variant_dic = {}\n",
    "        \n",
    "        # Streamlit option - calculates specifc features\n",
    "        if streamlit == True:\n",
    "            variant_dic['Gamertag'] = player_history['Results'][i]['Id']\n",
    "            variant_dic['TotalTimePlayed']= isodate.parse_duration(variant_stats['TotalTimePlayed']).total_seconds() / 3600\n",
    "            variant_dic['K/D'] = variant_stats['TotalKills'] / variant_stats['TotalDeaths']\n",
    "            variant_dic['Accuracy'] = variant_stats['TotalShotsLanded'] / variant_stats['TotalShotsFired']\n",
    "            variant_dic['WinRate'] = variant_stats['TotalGamesWon'] / variant_stats['TotalGamesLost']\n",
    "            vdf = vdf.append(variant_dic, True)\n",
    "            i += 1\n",
    "        \n",
    "        # Modeling option - includes all features but does not yet calculate\n",
    "        else:\n",
    "            variant_dic['Gamertag'] = player_history['Results'][i]['Id']\n",
    "            \n",
    "            # Loop that appends all stats to variant dic\n",
    "            for stat in stat_list[1:]:    \n",
    "                variant_dic[stat] = variant_stats[stat]\n",
    "            \n",
    "            # Parsing ISO duration times\n",
    "            variant_dic['TotalTimePlayed']= isodate.parse_duration(variant_stats['TotalTimePlayed']).total_seconds() / 3600\n",
    "            vdf = vdf.append(variant_dic, True)\n",
    "            i += 1\n",
    "    \n",
    "    # Return the streamlit or modeling dataframe\n",
    "    return vdf\n",
    "    \n",
    "build_history_dataframe(player_history, '1571fdac-e0b4-4ebc-a73a-6e13001b71d3', streamlit=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Recent Match Stats\n",
    "\n",
    "This function chains together all of the previous functions up to this point.  It returns a full dataframe for a single match, which could then be converted into a single row for our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:12:51.501762Z",
     "start_time": "2021-07-26T16:12:48.261241Z"
    }
   },
   "outputs": [],
   "source": [
    "# Function that combines all functions above to go through each step to\n",
    "# Get the match dataframe\n",
    "def recent_match_stats(gamertag, back_count=0):\n",
    "    \n",
    "    # Pull the match result as JSON from API\n",
    "    match_results = pull_recent_match(back_count, explore=False, gamertag=gamertag)\n",
    "    \n",
    "    # Build the base dataframe\n",
    "    base_df = build_base_dataframe(match_results, gamertag=gamertag)\n",
    "    \n",
    "    # Sleep for 1.01 seconds to avoid issues with API\n",
    "    time.sleep(1.01)\n",
    "    \n",
    "    # Create playerlist for player history API call\n",
    "    player_list = get_player_list(base_df)\n",
    "    \n",
    "    # Call API to get player history JSON\n",
    "    player_history = get_player_history(base_df)\n",
    "    \n",
    "    # Build base player stats dataframe based on player history API call\n",
    "    history_df = build_history_dataframe(player_history, match_results['GameBaseVariantId'])\n",
    "    \n",
    "    # Merge the base dataframe and stats dataframe\n",
    "    full_stats_df = pd.merge(base_df, history_df, how='inner', on = 'Gamertag')\n",
    "    \n",
    "    return full_stats_df\n",
    "\n",
    "# Show full dataframe for match\n",
    "df = recent_match_stats('Drymander', back_count=0)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert Match Dataframe into Single Row\n",
    "\n",
    "Now we'll write a function to flatten the dataframe into a single row, which will be required for modeling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:12:51.661799Z",
     "start_time": "2021-07-26T16:12:51.502762Z"
    }
   },
   "outputs": [],
   "source": [
    "# Function to convert the full match dataframe into a single Pandas row for modeling\n",
    "def one_row(df, for_model=False):\n",
    "    \n",
    "    # If statement that rules out matches that will present issues for the model\n",
    "    # We want to make sure that exactly 8 players finished teh match and that\n",
    "    # No player exited the game before it was over\n",
    "    if ((for_model==True) and ((len(df.index) != 8) or (1 in df['DNF'].values))):\n",
    "        # Returns an empty dataframe that will be appended to the modeling dataset,\n",
    "        # effectively denoting that the match will not be usable for the model\n",
    "        df = pd.DataFrame()\n",
    "    \n",
    "    # If the match meets the modeling criteria:\n",
    "    else:\n",
    "        # Sort by PlayerTeam (captures player team stats first)\n",
    "        # Sort by TotalTimePlayed\n",
    "        df = df.sort_values(by=['PlayerTeam', 'TotalTimePlayed'], ascending=(False, False))\n",
    "        \n",
    "        # Isolate portion of the dataframe for creating information we need\n",
    "        df = df.reset_index()\n",
    "        df_row = df.iloc[0:1,1:6]\n",
    "        \n",
    "        # Determine whether player won, lost, or tied the match\n",
    "        df_player = df.loc[df['PlayerTeam'] == 'Player']\n",
    "        if df_player['Winner'].str.contains('Victory').any():\n",
    "            df_row['WinLoseTie'] = 'Victory'\n",
    "        elif df_player['Winner'].str.contains('Defeat').any():\n",
    "            df_row['WinLoseTie'] = 'Defeat'\n",
    "        elif df_player['Winner'].str.contains('Tie').any():\n",
    "            df_row['WinLoseTie'] = 'Tie'\n",
    "        else: \n",
    "            df_row['WinLoseTie'] = 'Error Determining Victor'\n",
    "        \n",
    "        # 'Flatten' the match dataframe so that each player stat can\n",
    "        # be represented in one line of data\n",
    "        column_list = df.columns.to_list()\n",
    "        columns_converted = []\n",
    "        df = df.drop(df.iloc[:, 0:11], axis = 1)\n",
    "        df = df.stack().to_frame().T\n",
    "        df.columns = ['{}_{}'.format(*c) for c in df.columns]\n",
    "        \n",
    "        # Dictionary to convert strings denoting P1-4 (Player 1-4), E1 (Enemey 1-4)\n",
    "        column_convert_dic = {\"0_\":\"P1-\", \"1_\":\"P2-\",\"2_\":\"P3-\",\"3_\":\"P4-\",\n",
    "                              \"4_\":\"E1-\",\"5_\":\"E2-\",\"6_\":\"E3-\",\"7_\":\"E4-\",}\n",
    "\n",
    "        # Use dictionary to set column names\n",
    "        for k, v in column_convert_dic.items():\n",
    "            df.columns = df.columns.str.replace(k, v)\n",
    "        df.columns = df.columns.str.replace('-', '_')\n",
    "        df = df_row.join(df, how='outer')\n",
    "    \n",
    "    # Return match dataframe as one row\n",
    "    return df\n",
    "\n",
    "# Test function\n",
    "one_row(df, for_model=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Unique Gamertag List\n",
    "\n",
    "We're almost ready to start pulling rows into the dataframe.  We'll use this list exported from our EDA, which includes 24,248 unique players that I have personally played with over the past year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:12:51.669801Z",
     "start_time": "2021-07-26T16:12:51.662799Z"
    }
   },
   "outputs": [],
   "source": [
    "# Load unique gamertags pickle file from EDA notebook\n",
    "\n",
    "with open('data/unique_gamertags.pkl', 'rb') as unique_gamertags_pickle:\n",
    "    unique_gamertags = pickle.load(unique_gamertags_pickle)\n",
    "\n",
    "# See how many unique gamertags that the player has played with\n",
    "len(unique_gamertags)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modified Pull Matches Function\n",
    "\n",
    "We're going to modify our Pull Recent Match function to pull 25 matches per player from our set of unique gamertags.  We're pulling 25 for a couple of reasons:\n",
    "\n",
    "- The API allows up to 25 Match ID's to be pulled at once\n",
    "- Many of these matches will not qualify for our model due to players leaving in the middle of the match\n",
    "- Many games will be of different game types that might not be relevant to the game type that we'll be modeling "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:12:58.766883Z",
     "start_time": "2021-07-26T16:12:51.670801Z"
    }
   },
   "outputs": [],
   "source": [
    "# Function that slightly models the pull_recent_match function\n",
    "# Designed to pull 25 matches from each gamertag for modeling\n",
    "def model_pull_matches(how_recent, api_key=api_key, \n",
    "                       gamertag='Drymander', count=25):\n",
    "    \n",
    "    # Use gamertag_for_api function to remove any spaces\n",
    "    gamertag = gamertag_for_api(gamertag)\n",
    "    # Set API key\n",
    "    headers = {\n",
    "        # Request headers\n",
    "        'Ocp-Apim-Subscription-Key': api_key,\n",
    "    }\n",
    "    \n",
    "    # Pulls from arena mode, how_recent is how far to go back in the match history\n",
    "    # 'count' refers to the number of matches to pull\n",
    "    params = urllib.parse.urlencode({\n",
    "        # Request parameters\n",
    "        'modes': 'arena',\n",
    "        'start': 0,\n",
    "        'count': count,\n",
    "        'include-times': True,\n",
    "    })\n",
    "    \n",
    "    # Try / except for error handling\n",
    "    try:\n",
    "        \n",
    "        # Connect to API and pull most recent 25 matches for specified gamer\n",
    "        # and format into JSON\n",
    "        conn = http.client.HTTPSConnection('www.haloapi.com')\n",
    "        conn.request(\"GET\", f\"/stats/h5/players/{gamertag}/matches?%s\" % params, \"{body}\", headers)\n",
    "        time.sleep(1.01)\n",
    "        response = conn.getresponse()\n",
    "        data = response.read()\n",
    "        history_pull = json.loads(data)\n",
    "        print(history_pull['ResultCount'])\n",
    "        \n",
    "        # Counter variable for printing status\n",
    "        i = 0\n",
    "        \n",
    "        # Empty list to append 25 matches\n",
    "        latest_count_matches = []\n",
    "        \n",
    "        # Loop to go through each of the 25 matches to pull match details for each\n",
    "        for match in history_pull['Results']:\n",
    "            \n",
    "            # Identify match ID and match date\n",
    "            match_id = match['Id']['MatchId']\n",
    "            match_date = match['MatchCompletedDate']['ISO8601Date']\n",
    "            \n",
    "            # API call for each match ID in teh 25 matches\n",
    "            conn.request(\"GET\", f\"/stats/h5/arena/matches/{match_id}?%s\" % params, \"{body}\", headers)\n",
    "            time.sleep(1.1)\n",
    "            \n",
    "            # Format into JSON and append match ID and date\n",
    "            response = conn.getresponse()\n",
    "            data = response.read()\n",
    "            match_results = json.loads(data)\n",
    "            match_results['MatchId'] = match_id\n",
    "            match_results['Date'] = match_date\n",
    "            \n",
    "            # Append each match JSON to full list\n",
    "            latest_count_matches.append(match_results)\n",
    "            conn.close()\n",
    "            i += 1\n",
    "            \n",
    "            # Print total number of matches appended to list\n",
    "            print(f'{i} matches appended')\n",
    "    \n",
    "    # Error handling\n",
    "    except Exception as e:\n",
    "        print(f\"[Errno {0}] {1}\".format(e.errno, e.strerror))\n",
    "    \n",
    "    # Return full set of 25 matches\n",
    "    return latest_count_matches\n",
    "\n",
    "# Testing the function\n",
    "latest_count_matches = model_pull_matches(0, gamertag='Drymander', count=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Add Rows to Dataframe\n",
    "\n",
    "Finally, this function will chain everything together to add rows to the modeling dataframe.  \n",
    "\n",
    "You might notice that the gamertag list is chunked at [651:850].  This is where I left off with pulling rows, but I can continue adding more rows should it prove more beneficial to the model.  651 is the start number in the unique gamer tags list, and 850 is the end number.  This means I have pulled 25 matches from 850 gamertags, but it should be noted that some or all of those matches might not have been added to the final modeling dataframe.  The reasons for this incldue:\n",
    "- Less than 8 players (4 on each team) finished the match.\n",
    "- 8 players finished the match, but one or more players other than the 8 finishers disconnected from the match and was replaced mid-game.\n",
    "- During the Player Service Record API pull, one or more of the 8 players changed their gamertag **after** the date of the match, meaning the gamertag returned null values for their service record.\n",
    "\n",
    "This function is designed to append rows to a .csv file as it runs.  Since the function requires multiple API calls per row, this allows the ability to stop / start the function as needed.  It also allows you to pull additional rows in manageable chunks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:12:58.776886Z",
     "start_time": "2021-07-26T16:12:58.767884Z"
    }
   },
   "outputs": [],
   "source": [
    "# Setting run to false\n",
    "# If set to true, model will start adding new rows to model datafarme stored in .csv\n",
    "run = False\n",
    "\n",
    "# Isolating portion of unique_gamertags to build model dataframe in manageable chunks\n",
    "gamertag_list = unique_gamertags[651:850]\n",
    "\n",
    "# Function add rows to the modeling dataframe\n",
    "def model_recent_match_stats(gamertag_list, back_count=0, count=25):\n",
    "    \n",
    "    # Create new dataframe\n",
    "    df = pd.DataFrame()\n",
    "    \n",
    "    # Set gamertag_count to zero, will be used in updating status via print\n",
    "    gamertag_count = 0\n",
    "    \n",
    "    # Loop through gamertags in unique_gamertags list\n",
    "    for gamertag in tqdm(gamertag_list):\n",
    "        \n",
    "        # Try / except to deal with API error handling\n",
    "        try:\n",
    "            # Use latest_count_match function to pull 25 matches from player \n",
    "            latest_count_matches = model_pull_matches(0, gamertag=gamertag, count=count)\n",
    "            time.sleep(1.1)\n",
    "            \n",
    "            # Setting error counter and additional counter variable\n",
    "            error_count = 0\n",
    "            i = 0\n",
    "            \n",
    "            # Loop through each of the players 25 matches\n",
    "            for match in latest_count_matches:\n",
    "                \n",
    "                # Error handling\n",
    "                try:\n",
    "                    \n",
    "                    # Build the base dataframe\n",
    "                    base_df = build_base_dataframe(match, gamertag=gamertag)\n",
    "                    \n",
    "                    # Create playerlist for player history API call\n",
    "                    player_list = get_player_list(base_df)\n",
    "                    \n",
    "                    # Call API to get player history JSON\n",
    "                    player_history = get_player_history(base_df)\n",
    "                    \n",
    "                    # Build base player stats dataframe based on player history API call\n",
    "                    history_df = build_history_dataframe(player_history, match_results['GameBaseVariantId'])\n",
    "                    \n",
    "                    # Merge the base dataframe and stats dataframe\n",
    "                    full_stats_df = pd.merge(base_df, history_df, how='inner', on = 'Gamertag')\n",
    "                    \n",
    "                    # Flatten full match dataframe into one row, \n",
    "                    row = one_row(full_stats_df, for_model=True)\n",
    "                    \n",
    "                    # Append row to model dataframe .csv with specific date format  \n",
    "                    row.to_csv('data/MODEL_PULL.csv', mode ='a', date_format='%Y-%m-%d %H:%M:%S', header=False)\n",
    "                    \n",
    "                    # Append to model dataframe if working outside of .csv\n",
    "                    df = df.append(row)\n",
    "                    \n",
    "                    # Print how many rows have been added to the dataframe\n",
    "                    i += 1\n",
    "                    print(f'{i} rows added to model dataframe')\n",
    "\n",
    "                    time.sleep(1.1)\n",
    "                except:\n",
    "                    \n",
    "                    # Print error count if row cannot be added because it doesn't meet criteria\n",
    "                    # Typically this occurs when a player has changed their gamertag\n",
    "                    error_count += 1\n",
    "                    print(f'{error_count} rows returned error when getting player history')\n",
    "                    time.sleep(1.1)\n",
    "                    error_count += 1\n",
    "                    continue\n",
    "            \n",
    "            # Print number of gamertags that the function has gone through\n",
    "            gamertag_count += 1\n",
    "            print(f'{gamertag_count} completed')\n",
    "        \n",
    "        except:\n",
    "            \n",
    "            # Show error message if gamer skipped due to name change or other issue with API\n",
    "            print('gamertag skipped due to error')\n",
    "    \n",
    "    # Return modeling dataframe\n",
    "    return df\n",
    "\n",
    "if run == True:\n",
    "    model_df = model_recent_match_stats(gamertag_list, back_count=0, count=25)\n",
    "else:\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load Model Dataframe from CSV\n",
    "\n",
    "Let's take a look at our modeling dataframe by loading the .csv file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:13:01.222439Z",
     "start_time": "2021-07-26T16:12:58.778887Z"
    }
   },
   "outputs": [],
   "source": [
    "# Load csv created by model_recent_match_stats\n",
    "df = pd.read_csv('data/MODEL_PULL.csv')\n",
    "\n",
    "# Convert the dates to datetime objects\n",
    "df['Date'] = df['Date'].apply(pd.to_datetime)\n",
    "\n",
    "# Drop 'Unnamed: 0' from dataframe\n",
    "df = df.drop(['Unnamed: 0'], axis=1)\n",
    "\n",
    "df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:13:02.208662Z",
     "start_time": "2021-07-26T16:13:01.223440Z"
    }
   },
   "outputs": [],
   "source": [
    "# Remove null, infinity, and negative infinity\n",
    "# This can cause errors when creating features\n",
    "len_df = len(df)\n",
    "print(f'There are {len_df} total rows in the model dataframe.')\n",
    "print(f'There are {len(df[df.isin([np.nan, np.inf, -np.inf]).any(1)])} null or infinity values that should be removed from the model.')\n",
    "df = df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n",
    "len_df = len(df)\n",
    "print(f'There are {len_df} rows after removing null and infinity values.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Power weapon possession time needs to be converted from ISO duration times to floats representing hours"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:13:04.430738Z",
     "start_time": "2021-07-26T16:13:02.209662Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define roster to interact with dataframe\n",
    "roster = ['P1', 'P2', 'P3', 'P4', 'E1', 'E2', 'E3', 'E4']\n",
    "\n",
    "# Loop through players in roster\n",
    "for player in roster:\n",
    "    \n",
    "    # Empty list of parsed times\n",
    "    parsed_times = []\n",
    "    \n",
    "    # Parse times for each player \n",
    "    for row in df[f'{player}_TotalPowerWeaponPossessionTime']:\n",
    "        row = isodate.parse_duration(row).total_seconds() / 3600\n",
    "        parsed_times.append(row)\n",
    "    \n",
    "    # Set column to parsed times list\n",
    "    df[f'{player}_TotalPowerWeaponPossessionTime'] = parsed_times\n",
    "\n",
    "df['P1_TotalPowerWeaponPossessionTime']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similar to our EDA, we'll need to decode a few columns for readability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:13:04.435742Z",
     "start_time": "2021-07-26T16:13:04.431738Z"
    }
   },
   "outputs": [],
   "source": [
    "# This function will convert codes provided by the API into a readable format\n",
    "def decode_column(df, column, api_dict):\n",
    "    \n",
    "    # Empty list of decoded values\n",
    "    decoded_list = []\n",
    "    \n",
    "    # Loop through each row\n",
    "    for row in df[column]:\n",
    "        i = 0\n",
    "        \n",
    "        # Loop through API dictionary\n",
    "        for item in api_dict:\n",
    "            \n",
    "            # If code found, append it to list\n",
    "            if item['id'] == row:\n",
    "                name = item['name']\n",
    "                decoded_list.append(name)\n",
    "            \n",
    "            # Otherwise keep searching until found\n",
    "            else:\n",
    "                i += 1\n",
    "    \n",
    "    # Return decoded list\n",
    "    return decoded_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:13:04.448743Z",
     "start_time": "2021-07-26T16:13:04.436740Z"
    }
   },
   "outputs": [],
   "source": [
    "# This function will convert maps to readable format\n",
    "def decode_maps(df, column, api_dict):\n",
    "    decoded_list = []\n",
    "    \n",
    "    # Loop through each row\n",
    "    for row in df[column]:\n",
    "        i = 0\n",
    "        \n",
    "        # Creating map_count variable\n",
    "        map_count = len(api_dict)\n",
    "        \n",
    "        # For each item in API dictionary\n",
    "        for item in api_dict:\n",
    "            \n",
    "            # If map cannot be found, name 'Custom Map'\n",
    "            if (i+1) == map_count:\n",
    "                name = 'Custom Map'\n",
    "                decoded_list.append(name)\n",
    "            \n",
    "            # If found, assign value to code\n",
    "            elif item['id'] == row:\n",
    "                name = item['name']\n",
    "                decoded_list.append(name)\n",
    "            \n",
    "            # Otherwise keep looping\n",
    "            else:\n",
    "                i += 1\n",
    "    \n",
    "    # Return decoded list\n",
    "    return decoded_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:13:05.834058Z",
     "start_time": "2021-07-26T16:13:04.449743Z"
    }
   },
   "outputs": [],
   "source": [
    "# Loading GameBaseVariantId metadata dictionary pulled from API\n",
    "with open('data/GameBaseVariantId.pkl', 'rb') as GameBaseVariantId_pickle:\n",
    "    GameBaseVariantId_dic = pickle.load(GameBaseVariantId_pickle)\n",
    "\n",
    "# Loading PlaylistId metadata dictionary pulled from API\n",
    "with open('data/PlaylistId_dic.pkl', 'rb') as PlaylistId_dic_pickle:\n",
    "    PlaylistId_dic = pickle.load(PlaylistId_dic_pickle)\n",
    "\n",
    "# Loading map_list metadata dictionary pulled from API\n",
    "with open('data/map_list.pkl', 'rb') as map_list_pickle:\n",
    "    map_list = pickle.load(map_list_pickle)\n",
    "\n",
    "# Decode columsn with using our decode functions\n",
    "df['GameBaseVariantId'] = decode_column(df, 'GameBaseVariantId', GameBaseVariantId_dic)    \n",
    "df['PlaylistId'] = decode_column(df, 'PlaylistId', PlaylistId_dic)\n",
    "df['MapVariantId'] = decode_maps(df, 'MapVariantId', map_list)\n",
    "\n",
    "df[['GameBaseVariantId', 'PlaylistId', 'MapVariantId']].head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we will:\n",
    "- Remove tie games\n",
    "- Ensure victory and defeat are represented as 1 and 0 integers\n",
    "- Rename WinLoseTie to PlayerWin, which better describes our model target\n",
    "- Filter our match date to ensure our match information and our player service record information are chronologically synced."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:13:05.991093Z",
     "start_time": "2021-07-26T16:13:05.835059Z"
    }
   },
   "outputs": [],
   "source": [
    "# Remove ties from df\n",
    "df = df[df['WinLoseTie'] != 'Tie']\n",
    "\n",
    "# Set victories to 1 and defeats to 0\n",
    "df.loc[(df['WinLoseTie'] == 'Victory'),'WinLoseTie'] = 1\n",
    "df.loc[(df['WinLoseTie'] == 'Defeat'),'WinLoseTie'] = 0\n",
    "\n",
    "# Convert to integers to be safe\n",
    "df['WinLoseTie'] = df['WinLoseTie'].astype('int')\n",
    "\n",
    "# Rename WinLoseTie to PlayerWin for clarity\n",
    "df.rename(columns={'WinLoseTie':'PlayerWin'}, inplace=True)\n",
    "\n",
    "# Set date range, only want matches later than 7/1/21\n",
    "print(len(df))\n",
    "df = df[(df['Date'] > '2021-07-01')]\n",
    "print(len(df))\n",
    "\n",
    "df.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Choose GameBaseVariantId to model\n",
    "\n",
    "This function was used a bit more during experimentation, but it is still useful for filtering our model data by game base variant (Slayer or Capture the Flag) and playlist (Super Fiesta Party).  \n",
    "\n",
    "Since the majority of games I have played were Super Fiesta Party, we'll focus on those games for modeling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:13:06.008097Z",
     "start_time": "2021-07-26T16:13:05.992094Z"
    }
   },
   "outputs": [],
   "source": [
    "# Function to choose gametype\n",
    "def choose_gametype(df, GameBaseVariantId, PlaylistId):\n",
    "    \n",
    "    # If none selected, return df\n",
    "    # This will be useful for the next function\n",
    "    if GameBaseVariantId == None and PlaylistId == None:\n",
    "        gametype_df = df\n",
    "    \n",
    "    # Option to set GameBaseVariantId to None\n",
    "    elif GameBaseVariantId == None:\n",
    "        gametype_df = df[df['PlaylistId'] == PlaylistId]\n",
    "    \n",
    "    # Option to set PlaylistId to None\n",
    "    elif PlaylistId == None:\n",
    "        gametype_df = df[df['GameBaseVariantId'] == GameBaseVariantId]\n",
    "    \n",
    "    # Set dataframe to specified GameBaseVariantId and PlaylistId\n",
    "    else:\n",
    "        gametype_df = df[(df['GameBaseVariantId'] == GameBaseVariantId) & (df['PlaylistId'] == PlaylistId)]\n",
    "    \n",
    "    # Return dataframe\n",
    "    return gametype_df\n",
    "\n",
    "# Set to Super Fiesta Party\n",
    "df = choose_gametype(df, 'Capture the Flag', 'Super Fiesta Party')\n",
    "\n",
    "# Check function with value counts\n",
    "df['PlaylistId'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Drop columns\n",
    "\n",
    "We'll drop columns that will not be helpful for our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:13:06.130125Z",
     "start_time": "2021-07-26T16:13:06.009097Z"
    }
   },
   "outputs": [],
   "source": [
    "# Drop unnecessary columns\n",
    "df = df.drop(['Date',\n",
    "        'MatchId',\n",
    "        'GameBaseVariantId',\n",
    "        'PlaylistId',\n",
    "        'MapVariantId',\n",
    "        'P1_Gamertag',\n",
    "        'P2_Gamertag',\n",
    "        'P3_Gamertag',\n",
    "        'P4_Gamertag',\n",
    "        'E1_Gamertag',\n",
    "        'E2_Gamertag',\n",
    "        'E3_Gamertag',\n",
    "        'E4_Gamertag',\n",
    "        ]\n",
    "        ,axis=1)\n",
    "\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Creation\n",
    "\n",
    "Done in a slighty different order than the EDA, we will still want to create features that might be helpful for our model.\n",
    "\n",
    "We'll be creating:\n",
    "- Win rate\n",
    "- K/D\n",
    "- Accuracy\n",
    "\n",
    "And we'll also convert all total lifetime game base variant stats into 'per game' stats.  These per game stats might be more indicative of skill, whereas total lifetime stats are more indicative of experience.  Both are relevant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:13:06.678128Z",
     "start_time": "2021-07-26T16:13:06.134125Z"
    }
   },
   "outputs": [],
   "source": [
    "# Set roster for sifting through players of dataframe\n",
    "roster = ['P1', 'P2', 'P3', 'P4', 'E1', 'E2', 'E3', 'E4']\n",
    "\n",
    "# Loop through players in roster\n",
    "for player in roster:\n",
    "    \n",
    "    # Set win rate\n",
    "    df[f'{player}_WinRate'] = df[f'{player}_TotalGamesWon'] / df[f'{player}_TotalGamesLost']\n",
    "    \n",
    "    # Set K/D (or Kill / Death ratio)\n",
    "    df[f'{player}_K/D'] = df[f'{player}_TotalKills'] / df[f'{player}_TotalDeaths']\n",
    "    \n",
    "    # Set accuracy\n",
    "    df[f'{player}_Accuracy'] = df[f'{player}_TotalShotsLanded'] / df[f'{player}_TotalShotsFired']\n",
    "    \n",
    "    per_game_stat_list = ['TotalKills', 'TotalHeadshots', 'TotalWeaponDamage', \n",
    "                      'TotalShotsFired', 'TotalShotsLanded', 'TotalMeleeKills', \n",
    "                      'TotalMeleeDamage', 'TotalAssassinations', 'TotalGroundPoundKills', \n",
    "                      'TotalGroundPoundDamage', 'TotalShoulderBashKills', \n",
    "                      'TotalShoulderBashDamage', 'TotalGrenadeDamage', 'TotalPowerWeaponKills', \n",
    "                      'TotalPowerWeaponDamage', 'TotalPowerWeaponGrabs', \n",
    "                      'TotalPowerWeaponPossessionTime', 'TotalDeaths', 'TotalAssists', \n",
    "                      'TotalGrenadeKills']\n",
    "            \n",
    "    for stat in per_game_stat_list:\n",
    "        per_game_stat_string = stat.replace('Total', '')\n",
    "        per_game_stat_string = f'{per_game_stat_string}PerGame'\n",
    "        df[f'{player}_{per_game_stat_string}'] = df[f'{player}_{stat}'] / df[f'{player}_TotalGamesCompleted']\n",
    "#         variant_dic[per_game_stat_string] = variant_dic[stat] / variant_dic['TotalGamesCompleted']\n",
    "\n",
    "\n",
    "# Drop infinity values, which can arise if it is the first time a player\n",
    "# is playing specified playlist\n",
    "df = df.dropna()\n",
    "df = df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Make Model Dataframe Function\n",
    "\n",
    "Something that will be helpful for our model will be sorting each feature from highest to lowest for each team of players.  For each column in feature_list, this function will take each stat for P1, P2, P3, and P4 and reorder the stats.  Hopefully this will help the model understand that P1 represents the 'best' or 'highest' stat on that team, and P4 represents the 'worst' or 'lowest.'  The function will do the same for the enemy team (E1, E2, E3, and E4)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:15:45.981035Z",
     "start_time": "2021-07-26T16:13:06.680127Z"
    }
   },
   "outputs": [],
   "source": [
    "# Set columns for full model dataframe\n",
    "feature_list = [\n",
    "    # Main stats\n",
    "    'WinRate', 'K/D', 'Accuracy', 'TotalGamesCompleted', 'TotalGamesWon',\n",
    "    'TotalGamesLost', 'PrevTotalXP', 'SpartanRank', 'TotalTimePlayed',\n",
    "    # Total life time stats\n",
    "#     'TotalKills', 'TotalHeadshots', 'TotalWeaponDamage', \n",
    "#     'TotalShotsFired', 'TotalPowerWeaponPossessionTime',\n",
    "#     'TotalShotsLanded', 'TotalMeleeKills', 'TotalMeleeDamage', 'TotalAssassinations',\n",
    "#     'TotalGroundPoundKills', 'TotalGroundPoundDamage', 'TotalShoulderBashKills',\n",
    "#     'TotalShoulderBashDamage', 'TotalGrenadeDamage', 'TotalPowerWeaponKills',\n",
    "#     'TotalPowerWeaponDamage', 'TotalPowerWeaponGrabs',\n",
    "#     'TotalDeaths', 'TotalAssists', 'TotalGamesTied', 'TotalGrenadeKills',\n",
    "    # Per game stats   \n",
    "    'KillsPerGame', 'HeadshotsPerGame', 'WeaponDamagePerGame', \n",
    "    'ShotsFiredPerGame', 'ShotsLandedPerGame', 'MeleeKillsPerGame', \n",
    "    'MeleeDamagePerGame', 'AssassinationsPerGame', 'GroundPoundKillsPerGame', \n",
    "    'GroundPoundDamagePerGame', 'ShoulderBashKillsPerGame', \n",
    "    'ShoulderBashDamagePerGame', 'GrenadeDamagePerGame', 'PowerWeaponKillsPerGame', \n",
    "    'PowerWeaponDamagePerGame', 'PowerWeaponGrabsPerGame', \n",
    "    'PowerWeaponPossessionTimePerGame', 'DeathsPerGame', 'AssistsPerGame', \n",
    "    'GrenadeKillsPerGame',\n",
    "]\n",
    "\n",
    "\n",
    "# Function that sorts player stats\n",
    "def sort_players(df, feature_list, GameBaseVariantId, PlaylistId):\n",
    "    \n",
    "    # Choose gametype function\n",
    "    df = choose_gametype(df, GameBaseVariantId, PlaylistId) \n",
    "    \n",
    "    # Empty dataframe with PlayerWin as first column\n",
    "    model_df = pd.DataFrame()\n",
    "    model_df['PlayerWin'] = df['PlayerWin']\n",
    "    \n",
    "    # Loop that sorts player stats per team\n",
    "    for feature in feature_list:\n",
    "        feature_columns = [\n",
    "            f'P1_{feature}', f'P2_{feature}',\n",
    "            f'P3_{feature}', f'P4_{feature}', f'E1_{feature}',\n",
    "            f'E2_{feature}', f'E3_{feature}', f'E4_{feature}',\n",
    "            ]\n",
    "        \n",
    "        # Copy input dataframe columns\n",
    "        feature_df = df[feature_columns].copy()\n",
    "\n",
    "        # Sort Players in dataframe by highest value\n",
    "        i = 0\n",
    "        for row in tqdm(feature_df.iterrows()):\n",
    "            # Sort player / enemy from highest to lowest in row\n",
    "            feature_df.iloc[i, 0:4] = feature_df.iloc[i, 0:4].sort_values(ascending=False).values\n",
    "            feature_df.iloc[i, 4:8] = feature_df.iloc[i, 4:8].sort_values(ascending=False).values\n",
    "            i += 1\n",
    "        \n",
    "        # Join sorted features with PlayerWin column\n",
    "        model_df = model_df.join(feature_df, on=model_df.index)\n",
    "    \n",
    "    # Drop null values\n",
    "    model_df = model_df.dropna()\n",
    "    \n",
    "    # Return sorted dataframe\n",
    "    return model_df\n",
    "            \n",
    "df = sort_players(df, feature_list, None, None)\n",
    "\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-26T16:15:45.984036Z",
     "start_time": "2021-07-26T16:15:45.982035Z"
    }
   },
   "outputs": [],
   "source": [
    "# df.to_csv('data/Model_DF_PerGameFeatures_Sorted_HuskyRaid.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model with All Features\n",
    "\n",
    "We'll start by modeling all features broken down and sorted by individual player."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:32:11.865260Z",
     "start_time": "2021-07-29T22:32:11.322707Z"
    }
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('data/Model_DF_PerGameFeatures_Sorted_HuskyRaid.csv')\n",
    "df = df.drop(['Unnamed: 0'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:32:11.912490Z",
     "start_time": "2021-07-29T22:32:11.865260Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3728, 232)\n",
      "(1599, 232)\n"
     ]
    }
   ],
   "source": [
    "# Make model_df from a copy of our dataframe up to this point\n",
    "model_df = df.copy()\n",
    "\n",
    "# Assign features and target\n",
    "features = model_df.drop(['PlayerWin'], axis=1)\n",
    "target = model_df['PlayerWin']\n",
    "\n",
    "# Assigning X and y for train test split\n",
    "X = features\n",
    "y = target\n",
    "\n",
    "# Ensure target is integer format\n",
    "y = y.astype('int')\n",
    "\n",
    "# Train test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, \n",
    "                                                    random_state=8)\n",
    "\n",
    "# Print shape\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll set up a basic linear regression for the purposes of creating and testing our 'evaluate model' and 'make model' functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:32:12.120172Z",
     "start_time": "2021-07-29T22:32:11.916181Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(random_state=8)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create logistic regression model\n",
    "model_log = LogisticRegression(random_state=8)\n",
    "\n",
    "# Train on X_train and y_train\n",
    "model_log.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function will return cross validation scores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:32:12.895540Z",
     "start_time": "2021-07-29T22:32:12.122172Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression Cross Validation Scores:\n",
      "[0.64879357 0.61930295 0.64209115 0.62147651 0.61744966]\n",
      "\n",
      "Cross validation mean: \t62.98%\n"
     ]
    }
   ],
   "source": [
    "# Function to return cross validation scores\n",
    "def cross_val_check(model_string_name, model, X_train, y_train, X_test, y_test):\n",
    "    scores = cross_val_score(model, X_train, y_train, cv=5) # model, train, target, cross validation\n",
    "    print(f'{model_string_name} Cross Validation Scores:')\n",
    "    print(scores)\n",
    "    print(f'\\nCross validation mean: \\t{scores.mean():.2%}')\n",
    "    \n",
    "cross_val_check('Logistic Regression', model_log, X_train, y_train, X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function will return performance information and helpful visuals for interpreting the strengths and weaknesses of our models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:32:13.479194Z",
     "start_time": "2021-07-29T22:32:12.898540Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy: 64.35%\n",
      "Test Accuracy: 64.35%\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.62      0.40      0.48       673\n",
      "           1       0.65      0.82      0.73       926\n",
      "\n",
      "    accuracy                           0.64      1599\n",
      "   macro avg       0.64      0.61      0.61      1599\n",
      "weighted avg       0.64      0.64      0.62      1599\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def evaluate_model(model, X_train, X_test, y_train, \n",
    "                   y_test, cmap='Greens', normalize=None,\n",
    "                   classes=None,figsize=(10,4), graphs=False):\n",
    "    \n",
    "    \"\"\"\n",
    "    model :: classifier user desires to evaluate\n",
    "    X_train :: X training data\n",
    "    X_test :: X test data\n",
    "    y_train :: y_train data\n",
    "    y_test :: y_train data\n",
    "    cmap :: color palette of confusion matrix\n",
    "    normalize :: set to True if normalized confusion matrix is desired\n",
    "    figsize :: desired plot size\n",
    "\n",
    "    \"\"\"\n",
    "    \n",
    "    # Print model accuracy\n",
    "    print(f'Training Accuracy: {model.score(X_train,y_train):.2%}')\n",
    "    print(f'Test Accuracy: {model.score(X_test,y_test):.2%}')\n",
    "    print('')\n",
    "    \n",
    "    # Print classification report\n",
    "    y_test_predict = model.predict(X_test)\n",
    "    print(metrics.classification_report(y_test, y_test_predict,\n",
    "                                        target_names=classes))\n",
    "    \n",
    "    # Option to show graphs\n",
    "    if graphs == True:\n",
    "\n",
    "        # Plot confusion matrix\n",
    "        fig,ax = plt.subplots(ncols=2,figsize=figsize)\n",
    "        metrics.plot_confusion_matrix(model, X_test,y_test,cmap=cmap, \n",
    "                                      normalize=normalize,display_labels=classes,\n",
    "                                      ax=ax[0])\n",
    "\n",
    "        #Plot ROC curves\n",
    "        \n",
    "        with sns.axes_style(\"darkgrid\"):\n",
    "            curve = metrics.plot_roc_curve(model,X_train,y_train,ax=ax[1])\n",
    "            curve2 = metrics.plot_roc_curve(model,X_test,y_test,ax=ax[1])\n",
    "            curve.ax_.grid()\n",
    "            curve.ax_.plot([0,1],[0,1],ls=':')\n",
    "            fig.tight_layout()\n",
    "            plt.show()\n",
    "\n",
    "evaluate_model(model_log, X_train, X_test, y_train, \n",
    "                   y_test, graphs=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll build a function that accomplishes a few things:\n",
    "- Conducts the full train / test split process\n",
    "- Models the data\n",
    "- Provides evaluation metrics\n",
    "- Has options for choosing model type (e.g. logistic regression, random forest, SVM, XGBoost, etc.)\n",
    "- Has an option for running a dummy model\n",
    "- Has option for choosing a scaler if desired"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:32:15.115833Z",
     "start_time": "2021-07-29T22:32:13.481177Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "LogisticRegression() Cross Validation Scores:\n",
      "[0.64879357 0.61930295 0.64209115 0.62147651 0.61744966]\n",
      "\n",
      "Cross validation mean: \t62.98%\n",
      "Training Accuracy: 64.35%\n",
      "Test Accuracy: 64.35%\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.62      0.40      0.48       673\n",
      "           1       0.65      0.82      0.73       926\n",
      "\n",
      "    accuracy                           0.64      1599\n",
      "   macro avg       0.64      0.61      0.61      1599\n",
      "weighted avg       0.64      0.64      0.62      1599\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Function to create models\n",
    "def make_model(df, regressor=LogisticRegression, scale=False, graphs=False, dummy=False, cmap='Greens',\n",
    "              slim=False, scaler=StandardScaler()):\n",
    "\n",
    "    # Assigning X and y for train test split\n",
    "    X = df.drop(['PlayerWin'], axis=1)\n",
    "    y = df['PlayerWin']\n",
    "    \n",
    "    # Ensure target is integer format\n",
    "    y=y.astype('int')\n",
    "\n",
    "    # Train test split\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, \n",
    "                                                        random_state=8)\n",
    "    \n",
    "    # Option to scale data with scaler type as parameter\n",
    "    if scale==True:\n",
    "        scaler = scaler\n",
    "        X_train = pd.DataFrame(scaler.fit_transform(X_train))\n",
    "        X_test = pd.DataFrame(scaler.transform(X_test))\n",
    "    \n",
    "    # Option to return dummy model\n",
    "    if dummy == True:\n",
    "        model_log = DummyClassifier(strategy='stratified')\n",
    "        print('Using Dummy Model')\n",
    "    else:\n",
    "        model_log = regressor\n",
    "    \n",
    "    # Fit to X_train and y_train\n",
    "    model_log.fit(X_train, y_train)\n",
    "   \n",
    "    # Print total number of samples\n",
    "    total_samples = X_train.shape[0] + X_test.shape[0]\n",
    "    print(f'Total number of samples: {total_samples}')\n",
    "    print('------------------------------------------')\n",
    "    \n",
    "    # Option to suppress cross validation scores\n",
    "    if slim == False:\n",
    "        cross_val_check(str(regressor), model_log, X_train, y_train, X_test, y_test)\n",
    "    \n",
    "    evaluate_model(model_log, X_train, X_test, y_train, y_test, graphs=graphs, cmap=cmap)\n",
    "\n",
    "make_model(model_df, scale=False, graphs=True, regressor=LogisticRegression())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dummy Model\n",
    "\n",
    "As a baseline, we'll run a dummy model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:32:15.780611Z",
     "start_time": "2021-07-29T22:32:15.119481Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using Dummy Model\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "LogisticRegression() Cross Validation Scores:\n",
      "[0.5080429  0.50536193 0.48927614 0.52080537 0.46577181]\n",
      "\n",
      "Cross validation mean: \t49.79%\n",
      "Training Accuracy: 49.62%\n",
      "Test Accuracy: 53.22%\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.43      0.45      0.44       673\n",
      "           1       0.59      0.58      0.58       926\n",
      "\n",
      "    accuracy                           0.52      1599\n",
      "   macro avg       0.51      0.51      0.51      1599\n",
      "weighted avg       0.52      0.52      0.52      1599\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Dummy model for comparison\n",
    "make_model(model_df, scale=False, graphs=True, dummy=True, \n",
    "           cmap='Reds', regressor=LogisticRegression())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dummy model returned 49.16% accuracy, so a model with any predictive quality should return higher than that baseline."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression\n",
    "\n",
    "Now that we have a function to fully model our data, we can try our data on a few different types of models.  We'll start with basic logistic regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:32:16.850577Z",
     "start_time": "2021-07-29T22:32:15.786609Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "LogisticRegression(random_state=8) Cross Validation Scores:\n",
      "[0.64879357 0.61930295 0.64209115 0.62147651 0.61744966]\n",
      "\n",
      "Cross validation mean: \t62.98%\n",
      "Training Accuracy: 64.35%\n",
      "Test Accuracy: 64.35%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Basic logistic regression\n",
    "make_model(df, regressor=LogisticRegression(random_state=8), scale=False, graphs=False, cmap='Greens',\n",
    "              slim=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see if using scalers makes a difference.  We'll try Power Transformer, Standard Scaler, and Robust Scaler."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:32:22.988175Z",
     "start_time": "2021-07-29T22:32:16.856578Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression with PowerTransformer\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "LogisticRegression() Cross Validation Scores:\n",
      "[0.69705094 0.72654155 0.70911528 0.71006711 0.68993289]\n",
      "\n",
      "Cross validation mean: \t70.65%\n",
      "Training Accuracy: 75.46%\n",
      "Test Accuracy: 70.29%\n",
      "\n",
      "Logistic Regression with StandardScaler\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "LogisticRegression() Cross Validation Scores:\n",
      "[0.6997319  0.72788204 0.68900804 0.70067114 0.68993289]\n",
      "\n",
      "Cross validation mean: \t70.14%\n",
      "Training Accuracy: 75.08%\n",
      "Test Accuracy: 69.54%\n",
      "\n",
      "Logistic Regression with RobustScaler\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "LogisticRegression() Cross Validation Scores:\n",
      "[0.69436997 0.73458445 0.69705094 0.70201342 0.68993289]\n",
      "\n",
      "Cross validation mean: \t70.36%\n",
      "Training Accuracy: 75.24%\n",
      "Test Accuracy: 69.48%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Logistic Regression with PowerTransformer')\n",
    "make_model(model_df, scale=True, graphs=False, regressor=LogisticRegression(), \n",
    "           scaler=PowerTransformer())\n",
    "print('Logistic Regression with StandardScaler')\n",
    "make_model(model_df, scale=True, graphs=False, regressor=LogisticRegression(), \n",
    "           scaler=StandardScaler())\n",
    "print('Logistic Regression with RobustScaler')\n",
    "make_model(model_df, scale=True, graphs=False, regressor=LogisticRegression(), \n",
    "           scaler=RobustScaler())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It looks like the power transformer is best for logistic regression, let's take a look at the full evaluation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:32:27.058582Z",
     "start_time": "2021-07-29T22:32:22.990657Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "LogisticRegression() Cross Validation Scores:\n",
      "[0.69705094 0.72654155 0.70911528 0.71006711 0.68993289]\n",
      "\n",
      "Cross validation mean: \t70.65%\n",
      "Training Accuracy: 75.46%\n",
      "Test Accuracy: 70.29%\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.66      0.62      0.64       673\n",
      "           1       0.73      0.76      0.75       926\n",
      "\n",
      "    accuracy                           0.70      1599\n",
      "   macro avg       0.69      0.69      0.69      1599\n",
      "weighted avg       0.70      0.70      0.70      1599\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Logistic regression with power transformer, full evalutation\n",
    "make_model(model_df, scale=True, graphs=True, regressor=LogisticRegression(), scaler=PowerTransformer())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We were able to reach 70.29% test accuracy, which is definitely an improvement over the dummy model.\n",
    "\n",
    "Let's try a few more models to see if we can improve on that score."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest\n",
    "\n",
    "Next we'll try random forest models to see how they perform, with and without scalers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:32:49.398552Z",
     "start_time": "2021-07-29T22:32:27.058582Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "RandomForestClassifier() Cross Validation Scores:\n",
      "[0.71313673 0.71581769 0.73458445 0.72751678 0.68993289]\n",
      "\n",
      "Cross validation mean: \t71.62%\n",
      "Training Accuracy: 100.00%\n",
      "Test Accuracy: 71.61%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Random forest not scaled\n",
    "make_model(model_df, scale=False, graphs=False, regressor=RandomForestClassifier())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:33:57.130338Z",
     "start_time": "2021-07-29T22:32:49.400482Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest with PowerTransformer\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "RandomForestClassifier(random_state=8) Cross Validation Scores:\n",
      "[0.73592493 0.72117962 0.71983914 0.72751678 0.68322148]\n",
      "\n",
      "Cross validation mean: \t71.75%\n",
      "Training Accuracy: 100.00%\n",
      "Test Accuracy: 71.61%\n",
      "\n",
      "Random Forest with StandardScaler\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "RandomForestClassifier(random_state=8) Cross Validation Scores:\n",
      "[0.73324397 0.72117962 0.72252011 0.72483221 0.68456376]\n",
      "\n",
      "Cross validation mean: \t71.73%\n",
      "Training Accuracy: 100.00%\n",
      "Test Accuracy: 71.48%\n",
      "\n",
      "Random Forest with RobustScaler\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "RandomForestClassifier(random_state=8) Cross Validation Scores:\n",
      "[0.73324397 0.72117962 0.72252011 0.72751678 0.68456376]\n",
      "\n",
      "Cross validation mean: \t71.78%\n",
      "Training Accuracy: 100.00%\n",
      "Test Accuracy: 71.54%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Random forest with different scales\n",
    "print('Random Forest with PowerTransformer')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=RandomForestClassifier(random_state=8), scaler=PowerTransformer())\n",
    "print('Random Forest with StandardScaler')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=RandomForestClassifier(random_state=8), scaler=StandardScaler())\n",
    "print('Random Forest with RobustScaler')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=RandomForestClassifier(random_state=8), scaler=RobustScaler())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We were almost able to crack 72% with the power tranformer.  Let's take a look at the full evaluation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:34:22.423905Z",
     "start_time": "2021-07-29T22:33:57.132337Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "RandomForestClassifier(random_state=8) Cross Validation Scores:\n",
      "[0.73592493 0.72117962 0.71983914 0.72751678 0.68322148]\n",
      "\n",
      "Cross validation mean: \t71.75%\n",
      "Training Accuracy: 100.00%\n",
      "Test Accuracy: 71.61%\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.69      0.60      0.64       673\n",
      "           1       0.73      0.80      0.77       926\n",
      "\n",
      "    accuracy                           0.72      1599\n",
      "   macro avg       0.71      0.70      0.70      1599\n",
      "weighted avg       0.71      0.72      0.71      1599\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "make_model(model_df, scale=True, graphs=True, \n",
    "           regressor=RandomForestClassifier(random_state=8), scaler=PowerTransformer())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Random forest model with the power transformer is our best model so far at 71.61% test accuracy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Support Vector Machines\n",
    "\n",
    "Next we'll take a look at support vector machines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:34:47.547558Z",
     "start_time": "2021-07-29T22:34:22.425888Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "SVC() Cross Validation Scores:\n",
      "[0.62466488 0.61260054 0.60455764 0.59060403 0.60402685]\n",
      "\n",
      "Cross validation mean: \t60.73%\n",
      "Training Accuracy: 61.16%\n",
      "Test Accuracy: 62.48%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# SVM without scaling\n",
    "make_model(model_df, scale=False, graphs=False, regressor=svm.SVC())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:36:00.837765Z",
     "start_time": "2021-07-29T22:34:47.550557Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Support Vector Machine with PowerTransformer\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "SVC() Cross Validation Scores:\n",
      "[0.74530831 0.73592493 0.73324397 0.73422819 0.69798658]\n",
      "\n",
      "Cross validation mean: \t72.93%\n",
      "Training Accuracy: 87.53%\n",
      "Test Accuracy: 71.48%\n",
      "\n",
      "Support Vector Machine with StandardScaler\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "SVC() Cross Validation Scores:\n",
      "[0.72922252 0.71983914 0.7077748  0.71946309 0.67785235]\n",
      "\n",
      "Cross validation mean: \t71.08%\n",
      "Training Accuracy: 86.88%\n",
      "Test Accuracy: 70.17%\n",
      "\n",
      "Support Vector Machine with RobustScaler\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "SVC() Cross Validation Scores:\n",
      "[0.71849866 0.71983914 0.70375335 0.72348993 0.68590604]\n",
      "\n",
      "Cross validation mean: \t71.03%\n",
      "Training Accuracy: 81.87%\n",
      "Test Accuracy: 71.17%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Support Vector Machines with different scalers\n",
    "print('Support Vector Machine with PowerTransformer')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=svm.SVC(), scaler=PowerTransformer())\n",
    "print('Support Vector Machine with StandardScaler')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=svm.SVC(), scaler=StandardScaler())\n",
    "print('Support Vector Machine with RobustScaler')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=svm.SVC(), scaler=RobustScaler())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We came pretty close to 72% with SVM using the power transformer, but random forest is still our best model.  Let's take a look at SVM using power transformer, which scored 71.48% test accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:36:31.605985Z",
     "start_time": "2021-07-29T22:36:00.839669Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "SVC() Cross Validation Scores:\n",
      "[0.74530831 0.73592493 0.73324397 0.73422819 0.69798658]\n",
      "\n",
      "Cross validation mean: \t72.93%\n",
      "Training Accuracy: 87.53%\n",
      "Test Accuracy: 71.48%\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.67      0.64      0.65       673\n",
      "           1       0.75      0.77      0.76       926\n",
      "\n",
      "    accuracy                           0.71      1599\n",
      "   macro avg       0.71      0.70      0.71      1599\n",
      "weighted avg       0.71      0.71      0.71      1599\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "make_model(model_df, scale=True, graphs=True, \n",
    "           regressor=svm.SVC(), scaler=PowerTransformer())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBoost\n",
    "\n",
    "Finally, let's take a look at XGBoost."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:37:03.809444Z",
     "start_time": "2021-07-29T22:36:31.607799Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
      "              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
      "              importance_type='gain', interaction_constraints='',\n",
      "              learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
      "              min_child_weight=1, missing=nan, monotone_constraints='()',\n",
      "              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
      "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
      "              tree_method='exact', validate_parameters=1, verbosity=None) Cross Validation Scores:\n",
      "[0.71313673 0.72117962 0.72788204 0.72214765 0.69127517]\n",
      "\n",
      "Cross validation mean: \t71.51%\n",
      "Training Accuracy: 100.00%\n",
      "Test Accuracy: 70.36%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# XGBoost with no scaler\n",
    "make_model(model_df, scale=False, graphs=False, regressor=XGBClassifier())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:38:43.151562Z",
     "start_time": "2021-07-29T22:37:03.809444Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost with PowerTransformer\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
      "              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
      "              importance_type='gain', interaction_constraints='',\n",
      "              learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
      "              min_child_weight=1, missing=nan, monotone_constraints='()',\n",
      "              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=8,\n",
      "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
      "              tree_method='exact', validate_parameters=1, verbosity=None) Cross Validation Scores:\n",
      "[0.71313673 0.72117962 0.72788204 0.72214765 0.69127517]\n",
      "\n",
      "Cross validation mean: \t71.51%\n",
      "Training Accuracy: 100.00%\n",
      "Test Accuracy: 70.36%\n",
      "\n",
      "XGBoost with StandardScaler\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
      "              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
      "              importance_type='gain', interaction_constraints='',\n",
      "              learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
      "              min_child_weight=1, missing=nan, monotone_constraints='()',\n",
      "              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=8,\n",
      "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
      "              tree_method='exact', validate_parameters=1, verbosity=None) Cross Validation Scores:\n",
      "[0.71045576 0.72117962 0.72788204 0.72214765 0.69127517]\n",
      "\n",
      "Cross validation mean: \t71.46%\n",
      "Training Accuracy: 100.00%\n",
      "Test Accuracy: 70.36%\n",
      "\n",
      "XGBoost with RobustScaler\n",
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
      "              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
      "              importance_type='gain', interaction_constraints='',\n",
      "              learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
      "              min_child_weight=1, missing=nan, monotone_constraints='()',\n",
      "              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=8,\n",
      "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
      "              tree_method='exact', validate_parameters=1, verbosity=None) Cross Validation Scores:\n",
      "[0.71447721 0.72117962 0.72788204 0.72214765 0.69127517]\n",
      "\n",
      "Cross validation mean: \t71.54%\n",
      "Training Accuracy: 100.00%\n",
      "Test Accuracy: 70.36%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# XGBoost with different scalers\n",
    "print('XGBoost with PowerTransformer')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=XGBClassifier(random_state=8), scaler=PowerTransformer())\n",
    "print('XGBoost with StandardScaler')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=XGBClassifier(random_state=8), scaler=StandardScaler())\n",
    "print('XGBoost with RobustScaler')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=XGBClassifier(random_state=8), scaler=RobustScaler())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While worth a shot, XGBoost did not outperform our SVM model.  While most models look nearly identical in terms of accuracy, let's take a closer look at XGBoost with robust scaler, since it has the highest cross validation mean at 71.54%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:24.086428Z",
     "start_time": "2021-07-29T22:38:43.156562Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of samples: 5327\n",
      "------------------------------------------\n",
      "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
      "              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
      "              importance_type='gain', interaction_constraints='',\n",
      "              learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
      "              min_child_weight=1, missing=nan, monotone_constraints='()',\n",
      "              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
      "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
      "              tree_method='exact', validate_parameters=1, verbosity=None) Cross Validation Scores:\n",
      "[0.71447721 0.72117962 0.72788204 0.72214765 0.69127517]\n",
      "\n",
      "Cross validation mean: \t71.54%\n",
      "Training Accuracy: 100.00%\n",
      "Test Accuracy: 70.36%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=XGBClassifier(), scaler=RobustScaler())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Analysis\n",
    "\n",
    "Let's take a look at how logistic regression values different features in our full model dataset.  We'll create a model accuracy function and a plot coefficients function to explore the importances.\n",
    "\n",
    "Before that, we'll redo our train test split using the power tranformer, which was best for linear regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:26.468456Z",
     "start_time": "2021-07-29T22:39:24.086428Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3728, 232)\n",
      "(1599, 232)\n"
     ]
    }
   ],
   "source": [
    "# Make model_df from a copy of our dataframe up to this point\n",
    "model_df = df.copy()\n",
    "\n",
    "# Assign features and target\n",
    "features = model_df.drop(['PlayerWin'], axis=1)\n",
    "target = model_df['PlayerWin']\n",
    "\n",
    "# Assigning X and y for train test split\n",
    "X = features\n",
    "y = target\n",
    "\n",
    "# Ensure target is integer format\n",
    "y = y.astype('int')\n",
    "\n",
    "# Train test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, \n",
    "                                                    random_state=8)\n",
    "\n",
    "# Define and scale X train and test\n",
    "scaler = PowerTransformer()\n",
    "X_train = pd.DataFrame(scaler.fit_transform(X_train))\n",
    "X_test = pd.DataFrame(scaler.transform(X_test))\n",
    "\n",
    "# Create and fit logistic regressoin\n",
    "model_log = LogisticRegression()\n",
    "model_log.fit(X_train, y_train)\n",
    "\n",
    "# Print shape\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll create our functions and take a look a the feature importances."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.095849Z",
     "start_time": "2021-07-29T22:39:26.471454Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy: 75.46%\n",
      "Test Accuracy: 70.29%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x864 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Function to show model accuracy\n",
    "def model_accuracy(model, X_train, y_train, X_test, y_test):\n",
    "    \n",
    "    print(f'Training Accuracy: {model.score(X_train,y_train):.2%}')\n",
    "    print(f'Test Accuracy: {model.score(X_test,y_test):.2%}')\n",
    "\n",
    "# Uncomment line below to create images for presentation\n",
    "# sns.set_context('talk')\n",
    "\n",
    "# Function to plot logistic regression coefficients\n",
    "def plot_coefficients(model, features, X_train, X_test, y_train, y_test, count=20):    \n",
    "    \n",
    "    # Create a list of coefficients\n",
    "    coeffs = pd.Series(model.coef_.flatten(), index=features.columns).sort_values(ascending=False)\n",
    "#     coeffs = coeffs[:20]\n",
    "    top_coeffs = coeffs[:count]\n",
    "    bottom_coeffs = coeffs[-count:]\n",
    "    coeffs = top_coeffs.append(bottom_coeffs)\n",
    "    \n",
    "    # Display accuracy of newly trained model\n",
    "    model_accuracy(model, X_train=X_train, y_train=y_train, X_test=X_test, y_test=y_test)\n",
    "\n",
    "    # Create coefficients plot\n",
    "    with sns.plotting_context(\"talk\", font_scale=1.4):\n",
    "        with sns.axes_style(\"darkgrid\"):\n",
    "            plt.figure(figsize=(16, 12))\n",
    "            ax = sns.barplot(x=coeffs, y=coeffs.index, palette='coolwarm')\n",
    "            ax.set(xlabel='Log Coefficients', ylabel='Features')\n",
    "            ax.set_title(\"Feature Importances\",fontsize=30)\n",
    "    \n",
    "    # Save image\n",
    "    plt.tight_layout()\n",
    "\n",
    "    \n",
    "plot_coefficients(model_log, features, X_train, X_test, y_train, y_test, count=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's a bit difficult to interpret the model importances with so many features.  Let's try condesning the features by average feature per team and see if that returns more interpretable importances."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model with Condensed Features\n",
    "\n",
    "We'll create a function to condense the features on each team."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.502115Z",
     "start_time": "2021-07-29T22:39:27.095849Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'feature_list' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-32-c0deaa81fa78>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     21\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mdf_total\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     22\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 23\u001b[1;33m \u001b[0mdf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcondense_features\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfeature_list\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     24\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'feature_list' is not defined"
     ]
    }
   ],
   "source": [
    "# Function to convert model dataframe from individual players stats to averaged team stats\n",
    "def condense_features(df, feature_list):\n",
    "    \n",
    "    # Empty dataframe\n",
    "    df_total=pd.DataFrame()\n",
    "    \n",
    "    # Copy PlayerWin column\n",
    "    df_total['PlayerWin'] = df['PlayerWin']\n",
    "    \n",
    "    # Loop through features for each player\n",
    "    for feature in feature_list:\n",
    "        \n",
    "        # Add sum features for respective teams\n",
    "        df_total[f'Player_{feature}'] = df[f'P1_{feature}'] + df[f'P2_{feature}'] + df[f'P3_{feature}'] + df[f'P4_{feature}']\n",
    "        df_total[f'Enemy_{feature}'] = df[f'E1_{feature}'] + df[f'E2_{feature}'] + df[f'E3_{feature}'] + df[f'E4_{feature}']\n",
    "        \n",
    "        # Divide by 4 to get average\n",
    "        df_total[f'Player_{feature}'] = df_total[f'Player_{feature}'] / 4\n",
    "        df_total[f'Enemy_{feature}'] = df_total[f'Enemy_{feature}'] / 4\n",
    "\n",
    "    return df_total\n",
    "    \n",
    "df = condense_features(df, feature_list)\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.502115Z",
     "start_time": "2021-07-29T22:32:11.509Z"
    }
   },
   "outputs": [],
   "source": [
    "# df.to_csv('data/Model_W_Condensed_Features_HuskyRaid.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.502115Z",
     "start_time": "2021-07-29T22:32:11.516Z"
    }
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('data/Model_W_Condensed_Features_HuskyRaid.csv')\n",
    "df = df.drop(['Unnamed: 0'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we'll apply our train test split again.  Before checking out the features, let's see if condensing the features has any affect on model performances."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.502115Z",
     "start_time": "2021-07-29T22:32:11.526Z"
    }
   },
   "outputs": [],
   "source": [
    "# Make model_df from a copy of our dataframe up to this point\n",
    "model_df = df.copy()\n",
    "\n",
    "# Assign features and target\n",
    "features = model_df.drop(['PlayerWin'], axis=1)\n",
    "target = model_df['PlayerWin']\n",
    "\n",
    "# Assigning X and y for train test split\n",
    "X = features\n",
    "y = target\n",
    "\n",
    "# Ensure target is integer format\n",
    "y = y.astype('int')\n",
    "\n",
    "# Train test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, \n",
    "                                                    random_state=8)\n",
    "\n",
    "# Print shape\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression, Random Forest, SVM, XGBoost\n",
    "\n",
    "We'll rerun each model we tested before, but now with our condensed feature set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.502115Z",
     "start_time": "2021-07-29T22:32:11.535Z"
    }
   },
   "outputs": [],
   "source": [
    "print('Logistic Regression with PowerTransformer')\n",
    "make_model(model_df, scale=True, graphs=False, regressor=LogisticRegression(), scaler=PowerTransformer())\n",
    "print('Logistic Regression with StandardScaler')\n",
    "make_model(model_df, scale=True, graphs=False, regressor=LogisticRegression(), scaler=StandardScaler())\n",
    "print('Logistic Regression with RobustScaler')\n",
    "make_model(model_df, scale=True, graphs=False, regressor=LogisticRegression(), scaler=RobustScaler())\n",
    "\n",
    "# Random forest with power transformer scale\n",
    "print('Random Forest with PowerTransformer')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=RandomForestClassifier(random_state=8), scaler=PowerTransformer())\n",
    "print('Random Forest with StandardScaler')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=RandomForestClassifier(random_state=8), scaler=StandardScaler())\n",
    "print('Random Forest with RobustScaler')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=RandomForestClassifier(random_state=8), scaler=RobustScaler())\n",
    "\n",
    "# Support Vector Machines with different scalers\n",
    "print('Support Vector Machine with PowerTransformer')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=svm.SVC(), scaler=PowerTransformer())\n",
    "print('Support Vector Machine with StandardScaler')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=svm.SVC(), scaler=StandardScaler())\n",
    "print('Support Vector Machine with RobustScaler')\n",
    "make_model(model_df, scale=True, graphs=False, \n",
    "           regressor=svm.SVC(), scaler=RobustScaler())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks like we beat our highest score with the condensed feature set!  Let's take a look at logistic regression with the power transformer in more detail."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.502115Z",
     "start_time": "2021-07-29T22:32:11.544Z"
    }
   },
   "outputs": [],
   "source": [
    "print('Logistic Regression with PowerTransformer')\n",
    "make_model(model_df, scale=True, graphs=True, regressor=LogisticRegression(), scaler=PowerTransformer())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Condensed Feature Analysis\n",
    "\n",
    "Let's take a look at the feature importances now that we have condensed the featuers.  We'll perform our train / test split again using the power transformer, and then we'll run our feature importances function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.502115Z",
     "start_time": "2021-07-29T22:32:11.553Z"
    }
   },
   "outputs": [],
   "source": [
    "# Make model_df from a copy of our dataframe up to this point\n",
    "model_df = df.copy()\n",
    "\n",
    "# Assign features and target\n",
    "features = model_df.drop(['PlayerWin'], axis=1)\n",
    "target = model_df['PlayerWin']\n",
    "\n",
    "# Assigning X and y for train test split\n",
    "X = features\n",
    "y = target\n",
    "\n",
    "# Ensure target is integer format\n",
    "y = y.astype('int')\n",
    "\n",
    "# Train test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, \n",
    "                                                    random_state=8)\n",
    "\n",
    "# Define and scale X train and test\n",
    "scaler = PowerTransformer()\n",
    "X_train = pd.DataFrame(scaler.fit_transform(X_train))\n",
    "X_test = pd.DataFrame(scaler.transform(X_test))\n",
    "\n",
    "# Create and fit logistic regressoin\n",
    "model_log = LogisticRegression()\n",
    "model_log.fit(X_train, y_train)\n",
    "\n",
    "# Print shape\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.517721Z",
     "start_time": "2021-07-29T22:32:11.560Z"
    }
   },
   "outputs": [],
   "source": [
    "plot_coefficients(model_log, features, X_train, X_test, y_train, y_test, count=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the slimmed down features, we see that Player Winrate is now the most important feature as well as player shots landed per game.  It's still a bit difficult to understand why something like ShotsLandedPerGame is ranked so high, but perhaps this speaks to accuracy being an important factor.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Removing Multicollinearity\n",
    "\n",
    "We'll take one last step regarding model interpretation by removing multicollinearity.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.517721Z",
     "start_time": "2021-07-29T22:32:11.569Z"
    }
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('data/Model_W_Condensed_Features_HuskyRaid.csv')\n",
    "df = df.drop(['Unnamed: 0'], axis=1)\n",
    "model_df = df.copy()\n",
    "\n",
    "columns = ['PlayerWin', 'Player_WinRate', 'Enemy_WinRate', 'Player_K/D',\n",
    "       'Enemy_K/D', 'Player_Accuracy', 'Enemy_Accuracy',\n",
    "       'Player_TotalGamesCompleted', 'Enemy_TotalGamesCompleted',\n",
    "       'Player_SpartanRank', 'Enemy_SpartanRank',\n",
    "       'Player_KillsPerGame', 'Enemy_KillsPerGame',\n",
    "       'Player_HeadshotsPerGame', 'Enemy_HeadshotsPerGame',\n",
    "       'Player_DeathsPerGame','Enemy_DeathsPerGame', \n",
    "       'Player_GrenadeKillsPerGame', 'Enemy_GrenadeKillsPerGame']\n",
    "\n",
    "model_df = model_df[columns]\n",
    "\n",
    "model_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.517721Z",
     "start_time": "2021-07-29T22:32:11.575Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "\n",
    "# Create function to output multicollinearity heatmap\n",
    "def heatmap(df_name, figsize=(30,30), cmap='Reds'):\n",
    "    with sns.axes_style(\"darkgrid\"):\n",
    "        corr = df_name.drop('PlayerWin',axis=1).corr()\n",
    "        mask = np.zeros_like(corr)\n",
    "        mask[np.triu_indices_from(mask)] = True\n",
    "        fig, ax = plt.subplots(figsize=figsize)\n",
    "        ax = sns.heatmap(corr, annot=True, cmap=cmap, mask=mask)\n",
    "    \n",
    "    return fig, ax\n",
    "\n",
    "heatmap(model_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It looks like we were able to get rid of multicollinear features that broached the 0.75 threshold.  Let's run the train test split again and check out the feature importances."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.517721Z",
     "start_time": "2021-07-29T22:32:11.582Z"
    }
   },
   "outputs": [],
   "source": [
    "# Assign features and target\n",
    "features = model_df.drop(['PlayerWin'], axis=1)\n",
    "target = model_df['PlayerWin']\n",
    "\n",
    "# Assigning X and y for train test split\n",
    "X = features\n",
    "y = target\n",
    "\n",
    "# Ensure target is integer format\n",
    "y = y.astype('int')\n",
    "\n",
    "# Train test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, \n",
    "                                                    random_state=8)\n",
    "\n",
    "# Define and scale X train and test\n",
    "scaler = PowerTransformer()\n",
    "X_train = pd.DataFrame(scaler.fit_transform(X_train))\n",
    "X_test = pd.DataFrame(scaler.transform(X_test))\n",
    "\n",
    "# Create and fit logistic regressoin\n",
    "model_log = LogisticRegression()\n",
    "model_log.fit(X_train, y_train)\n",
    "\n",
    "# Print shape\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.517721Z",
     "start_time": "2021-07-29T22:32:11.595Z"
    }
   },
   "outputs": [],
   "source": [
    "plot_coefficients(model_log, features, X_train, X_test, y_train, y_test, count=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems that Player_WinRate is still the most important feature in predicting the outcome of a match."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Best Model\n",
    "\n",
    "We explored many model types with a variety of scalers and datasets.  The best model for predicting victory using only gamertags and data available from the API was the per-game statistics condensed by player and enemy teams using logistic regression and the power transformer for scaling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-07-29T22:39:27.517721Z",
     "start_time": "2021-07-29T22:32:11.605Z"
    }
   },
   "outputs": [],
   "source": [
    "# import matplotlib.pyplot as plt\n",
    "# %matplotlib inline\n",
    "# import seaborn as sns\n",
    "# sns.set(rc={'axes.facecolor':'white'})\n",
    "\n",
    "df = pd.read_csv('data/Model_W_Condensed_Features_HuskyRaid.csv')\n",
    "df = df.drop(['Unnamed: 0'], axis=1)\n",
    "\n",
    "# Make model_df from a copy of our dataframe up to this point\n",
    "model_df = df.copy()\n",
    "\n",
    "# Assign features and target\n",
    "features = model_df.drop(['PlayerWin'], axis=1)\n",
    "target = model_df['PlayerWin']\n",
    "\n",
    "# Assigning X and y for train test split\n",
    "X = features\n",
    "y = target\n",
    "\n",
    "# Ensure target is integer format\n",
    "y = y.astype('int')\n",
    "\n",
    "# Train test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, \n",
    "                                                    random_state=8)\n",
    "\n",
    "# Print shape\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "\n",
    "print('Logistic Regression with PowerTransformer')\n",
    "make_model(model_df, scale=True, graphs=True, regressor=LogisticRegression(), scaler=PowerTransformer())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model is more precise at predicting victory over defeat, and this might be due to the fact that the matches compiled for the dataframe came from players that were fairly experienced in the Super Fiesta Party playlist.  In the future, it might be worth exploring matches from competitors with less play time and less experience in the playlist."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusions and Recommendations\n",
    "\n",
    "\n",
    "### Visualizations\n",
    "\n",
    "Visuals depicting historical performance and player growth aren't found in many major titles. After constructing some myself with my own data, I firmly believe that visuals like these are low hanging fruit for developers hoping to increase engagement and player retention.\n",
    "\n",
    "Exploring K/D improvement over time reaffirms many of the decisions I made while trying to become a better team player. There is a growing community of creaters on YouTube who specialize in skills, tactics, and controller setting optimization. The popularity of these channels is surely evidence that gamers do indeed care about becoming better players.\n",
    "\n",
    "For example, providing a K/D ratio over time similar to the one I created here but with visual markers indicating controller setting changes, weapon loadout changes, or anything defined by the player could alleviate frustration caused by a sense of failure and defeat when first starting a game.\n",
    "\n",
    "Playing devil's advocate, I will admit that providing increased transparency in performance could fuel the ire of this generation's anger with developers and might have the opposite effect.\n",
    "\n",
    "I recmmend developers experiment with offering these tools to players. Properly framed, these visuals could increase satisfaction in more seasoned players and offer guidance to newer players.\n",
    "\n",
    "### Modeling\n",
    "\n",
    "For this specific playlist and with players who were most likely more skilled than average, we were able to predict the victor of a match with 72.73% accuracy using only information gathered by the API and no details about what actually occurred during the match.  \n",
    "\n",
    "While I admittedly have no knowledge on best practices in ensuring a positive player experience, I believe an ideal matchmaking algorithm should not be predictable above a certain threshold, ideally not much higher than 50%.\n",
    "\n",
    "It is entirely possible that matchmaking algorithms are already optimized to meet this ideal standard.  Perhaps sourcing modeling data from more skilled players in a very specific playlist would naturally lead to a higher than desired predictive quality simply because there are not enough equally skilled players entering matchmaking to ensure an even match at various hours of the day.\n",
    "\n",
    "However, if that's not the case, a solution to uneven matchmaking might come in the form of a machine learning model as simple and efficient as logistic regression using readily available player data.  If something like this isn't being used, it could be implemented experimentally.\n",
    "\n",
    "I should note that none of the modeling was conducted with ranked matchmaking, which certainly exists in Halo 5 and many other competitive games.  That system is likely more nuanced and robust, and deserves its own round of modeling and analysis.\n",
    "\n",
    "# Next Steps\n",
    "\n",
    "\n",
    "### Visualizations\n",
    "\n",
    "Conducting market research or simply raising the topic on social media or a game's subreddit would offer immediate insight into what players might like to know about their performance. It would be important to develop an understanding of which visuals are fun and engaging and which visuals could potentially cause more frustration.\n",
    "\n",
    "Additionally, on top of personal improvement metrics, there is an abundance of post-match data in Halo 5 that is currently going under-utilized. Here are a few ideas that could be explored for enhancing the match report:\n",
    "\n",
    "- 2D / 3D heat maps depicting areas of high activity during the match\n",
    "- A one dimendsional bar depicting who was in the lead throughout the duration of the match\n",
    "- Sueprlative awards granted to each player (best long distance, most destruction, best accuracy, e tc.)\n",
    "\n",
    "### Modeling\n",
    "\n",
    "Regarding the Super Fiesta Party playlist, where players spawn with random weapons throughout the match, there exists a 'Match Events' API call that details nearly every action that happened in any given match.  Most importantly, this provides information on what weapons players spawned with throughout the match.  Given the fact that the weapons are randomized, frequenters of Super Fiesta Party will (or should) freely admit that luck with the random weapons varies substantially.\n",
    "\n",
    "This project was originally concieved with this in mind, and the goal was to predict victory based on random weapon spawns alone.  The hurdle we encountered was that there was not a way to decode the +100 weapon variants.  343 Industries admitted in a forum post that adding this to the API would not be trivial, and given the API is technically a beta, they're under no obligation to give us this information.  However, it should be possible to decode the weapon variants through some individual data collection conducted through custom matches.\n",
    "\n",
    "Finally, we would like to exapnd our modeling dataset to a variety of skill levels and playlists, which will be possible by identifying players that meet this criteria.  It would certainly be worthwhile to determine whether or not ranked matchmaking has the same level of predictive quality."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
